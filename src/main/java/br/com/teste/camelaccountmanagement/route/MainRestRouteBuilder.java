package br.com.teste.camelaccountmanagement.route;

import br.com.teste.camelaccountmanagement.model.dto.*;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Component;

@Component
public class MainRestRouteBuilder extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        restConfiguration()
                .apiContextRouteId("swagger-route")
                .component("servlet")
                .contextPath("/account_management/v1/*")
                .apiContextPath("/swagger")
                    .apiProperty("api.title", "Account Management")
                    .apiProperty("api.description", "Service to manage accounts and its transactions")
                    .apiProperty("api.version", "1.0.0")
                    .apiProperty("host", "localhost")
                    .apiProperty("port", "8081")
                    .apiProperty("schemes", "http");

        rest("/customers")
                .get()
                    .id("id-MainRoute-getCustomers")
                    .description("Returns a list of Customers")
                    .bindingMode(RestBindingMode.auto)
                    .skipBindingOnErrorCode(true)
                    .param()
                        .name("page")
                        .type(RestParamType.query)
                        .description("page to be returned")
                    .endParam()
                    .param()
                        .name("size")
                        .type(RestParamType.query)
                        .description("Number of records to be returned per page")
                    .endParam()
                    .param()
                        .name("_sort")
                        .type(RestParamType.query)
                        .description("Sort the result")
                    .endParam()
                    .param()
                        .name("name")
                        .type(RestParamType.query)
                        .description("filter results by name")
                    .endParam()
                    .param()
                        .name("document")
                        .type(RestParamType.query)
                        .description("filter results by document")
                    .endParam()
                    .produces(MediaType.APPLICATION_JSON_VALUE)
                    .outType(PageableCustomer.class)
                    .responseMessage().code(200).message("OK").endResponseMessage()
                    .responseMessage().code(400).message("Bad Request").endResponseMessage()
                    .responseMessage().code(401).message("Unauthorized").endResponseMessage()
                    .responseMessage().code(403).message("Forbidden").endResponseMessage()
                    .responseMessage().code(406).message("Not Acceptable").endResponseMessage()
                    .responseMessage().code(500).message("Internal Server Error").endResponseMessage()
                    .responseMessage().code(504).message("Gateway Timeout").endResponseMessage()
                .to("direct:TO_getCustomers")

                .post()
                    .id("id-MainRoute-createCustomers")
                    .description("Create a new Customers")
                    .bindingMode(RestBindingMode.auto)
                    .skipBindingOnErrorCode(true)
                    .type(CreateCustomerDTO.class)
                    .outType(PostResponseDTO.class)
                    .responseMessage().code(200).message("OK").endResponseMessage()
                    .responseMessage().code(400).message("Bad Request").endResponseMessage()
                    .responseMessage().code(401).message("Unauthorized").endResponseMessage()
                    .responseMessage().code(403).message("Forbidden").endResponseMessage()
                    .responseMessage().code(406).message("Not Acceptable").endResponseMessage()
                    .responseMessage().code(500).message("Internal Server Error").endResponseMessage()
                    .responseMessage().code(504).message("Gateway Timeout").endResponseMessage()
                .to("direct:TO_createCustomers");

        rest("/customers/{customerId}/accounts")
                .get()
                    .id("id-MainRoute-getAccounts")
                    .description("Returns a list of Accounts")
                    .bindingMode(RestBindingMode.auto)
                    .skipBindingOnErrorCode(true)
                    .param()
                        .name("customerId")
                        .type(RestParamType.path)
                        .required(Boolean.TRUE)
                        .description("customerId")
                    .endParam()
                    .param()
                        .name("page")
                        .type(RestParamType.query)
                        .description("page to be returned")
                    .endParam()
                    .param()
                        .name("size")
                        .type(RestParamType.query)
                        .description("Number of records to be returned per page")
                    .endParam()
                    .param()
                        .name("_sort")
                        .type(RestParamType.query)
                        .description("Sort the result")
                    .endParam()
                    .produces(MediaType.APPLICATION_JSON_VALUE)
                    .outType(PageableAccount.class)
                    .responseMessage().code(200).message("OK").endResponseMessage()
                    .responseMessage().code(400).message("Bad Request").endResponseMessage()
                    .responseMessage().code(401).message("Unauthorized").endResponseMessage()
                    .responseMessage().code(403).message("Forbidden").endResponseMessage()
                    .responseMessage().code(406).message("Not Acceptable").endResponseMessage()
                    .responseMessage().code(500).message("Internal Server Error").endResponseMessage()
                    .responseMessage().code(504).message("Gateway Timeout").endResponseMessage()
                .to("direct:TO_getAccounts")

                .post()
                    .id("id-MainRoute-createAccounts")
                    .description("Create a new Accounts")
                    .bindingMode(RestBindingMode.auto)
                    .skipBindingOnErrorCode(true)
                    .type(CreateAccountDTO.class)
                    .outType(PostResponseDTO.class)
                    .responseMessage().code(200).message("OK").endResponseMessage()
                    .responseMessage().code(400).message("Bad Request").endResponseMessage()
                    .responseMessage().code(401).message("Unauthorized").endResponseMessage()
                    .responseMessage().code(403).message("Forbidden").endResponseMessage()
                    .responseMessage().code(406).message("Not Acceptable").endResponseMessage()
                    .responseMessage().code(500).message("Internal Server Error").endResponseMessage()
                    .responseMessage().code(504).message("Gateway Timeout").endResponseMessage()
                .to("direct:TO_createAccounts");

        rest("/customers/{customerId}/accounts/{accountId}/transactions")
                .get()
                    .id("id-MainRoute-getTransactions")
                    .description("Returns a list of Transactions")
                    .bindingMode(RestBindingMode.auto)
                    .skipBindingOnErrorCode(true)
                    .param()
                        .name("customerId")
                        .type(RestParamType.path)
                        .required(Boolean.TRUE)
                        .description("customerId")
                    .endParam()
                    .param()
                        .name("accountId")
                        .type(RestParamType.path)
                        .required(Boolean.TRUE)
                        .description("accountId")
                    .endParam()
                    .param()
                        .name("page")
                        .type(RestParamType.query)
                        .description("page to be returned")
                    .endParam()
                    .param()
                        .name("size")
                        .type(RestParamType.query)
                        .description("Number of records to be returned per page")
                    .endParam()
                    .param()
                        .name("_sort")
                        .type(RestParamType.query)
                        .description("Sort the result")
                    .endParam()
                    .produces(MediaType.APPLICATION_JSON_VALUE)
                    .outType(PageableTransaction.class)
                    .responseMessage().code(200).message("OK").endResponseMessage()
                    .responseMessage().code(400).message("Bad Request").endResponseMessage()
                    .responseMessage().code(401).message("Unauthorized").endResponseMessage()
                    .responseMessage().code(403).message("Forbidden").endResponseMessage()
                    .responseMessage().code(406).message("Not Acceptable").endResponseMessage()
                    .responseMessage().code(500).message("Internal Server Error").endResponseMessage()
                    .responseMessage().code(504).message("Gateway Timeout").endResponseMessage()
                .to("direct:TO_getTransactions")

                .post()
                    .id("id-MainRoute-createTransactions")
                    .description("Create a new Transactions")
                    .bindingMode(RestBindingMode.auto)
                    .skipBindingOnErrorCode(true)
                    .type(CreateTransactionDTO.class)
                    .outType(NewTransactionResponseDTO.class)
                    .responseMessage().code(200).message("OK").endResponseMessage()
                    .responseMessage().code(400).message("Bad Request").endResponseMessage()
                    .responseMessage().code(401).message("Unauthorized").endResponseMessage()
                    .responseMessage().code(403).message("Forbidden").endResponseMessage()
                    .responseMessage().code(406).message("Not Acceptable").endResponseMessage()
                    .responseMessage().code(500).message("Internal Server Error").endResponseMessage()
                    .responseMessage().code(504).message("Gateway Timeout").endResponseMessage()
                .to("direct:TO_createTransactions");

        rest("/customers/{customerId}/accounts/{accountId}/transactions/{transactionId}/cancel")
                .post()
                    .id("id-MainRoute-cancelTransactions")
                    .description("Cancel a Transaction")
                    .bindingMode(RestBindingMode.auto)
                    .skipBindingOnErrorCode(true)
                    .param()
                        .name("customerId")
                        .type(RestParamType.path)
                        .required(Boolean.TRUE)
                        .description("customerId")
                    .endParam()
                    .param()
                        .name("accountId")
                        .type(RestParamType.path)
                        .required(Boolean.TRUE)
                        .description("accountId")
                    .endParam()
                    .param()
                        .name("transactionId")
                        .type(RestParamType.path)
                        .required(Boolean.TRUE)
                        .description("transactionId")
                    .endParam()
                    .type(CancelTransactionDTO.class)
                    .outType(NewTransactionResponseDTO.class)
                    .responseMessage().code(200).message("OK").endResponseMessage()
                    .responseMessage().code(400).message("Bad Request").endResponseMessage()
                    .responseMessage().code(401).message("Unauthorized").endResponseMessage()
                    .responseMessage().code(403).message("Forbidden").endResponseMessage()
                    .responseMessage().code(406).message("Not Acceptable").endResponseMessage()
                    .responseMessage().code(500).message("Internal Server Error").endResponseMessage()
                    .responseMessage().code(504).message("Gateway Timeout").endResponseMessage()
                .to("direct:TO_cancelTransactions");
    }
}